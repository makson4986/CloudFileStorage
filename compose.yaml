services:
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    ports:
      - "5433:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app_network
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_LOGIN}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - app_network
  frontend:
    image: frontend:latest
    container_name: frontend
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - app_network
  app:
    build: .
    image: app
    container_name: app
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - redis
      - minio
      - frontend
    environment:
      POSTGRES_LOGIN: ${POSTGRES_LOGIN}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MINIO_ACCESS_KEY: ${MINIO_LOGIN}
      MINIO_SECRET_KEY: ${MINIO_PASSWORD}
    networks:
      - app_network
volumes:
  pgdata:
  redis_data:
  minio_data:
networks:
  app_network:
    driver: bridge